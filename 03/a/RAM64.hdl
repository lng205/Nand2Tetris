// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    Mux8Way16(a=oa, b=ob, c=oc, d=od, e=oe, f=of, g=og, h=oh, sel=address[3..5], out=out);
    DMux8Way(in=load, sel=address[3..5], a=la, b=lb, c=lc, d=ld, e=le, f=lf, g=lg, h=lh);
    RAM8(in=in, load=la, address=address[0..2], out=oa);
    RAM8(in=in, load=lb, address=address[0..2], out=ob);
    RAM8(in=in, load=lc, address=address[0..2], out=oc);
    RAM8(in=in, load=ld, address=address[0..2], out=od);
    RAM8(in=in, load=le, address=address[0..2], out=oe);
    RAM8(in=in, load=lf, address=address[0..2], out=of);
    RAM8(in=in, load=lg, address=address[0..2], out=og);
    RAM8(in=in, load=lh, address=address[0..2], out=oh);
}