// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Set instrucBuf = 0 when instruction[0] == 0;
    Mux16(a=false, b=instruction, sel=instruction[0], out[11]=instructBuf11,
          out[12]=instructBuf12, out[13]=instructBuf13,
          out[14]=instructBuf14, out[15]=instructBuf15);

    // Calc
    ALU(x=D, y=A, zx=instruction[4], nx=instruction[5]
                , zy=instruction[6], ny=instruction[7]
                , f =instruction[8], no=instruction[9]
                , out=oC, out=outM, zr=zr, ng=ng);


    // Write to A, D, M respectively based on instruction[10..12]

    // Set A = instruction when instruction[0] == 0 
    // or A = oC when instruction[10] == 1
    Not(in=instruction[0], out=instruct0Not);
    Or(a=instruct0Not, b=instruction[10], out=lA);
    Mux16(a=instruction, b=oC, sel=instruction[10], out=iA);
    ARegister(in=iA, load=lA, out[0..14]=addressM, out=oA);

    // Select inM when instruction[3] == 1
    Mux16(a=oA, b=inM, sel=instruction[3], out=A);

    // Set D when instrucBuf[11] == 1
    DRegister(in=oC, load=instructBuf11, out=D);

    // Write M when instructBuf12 == 1
    Not(in=instructBuf12, out=instruct12Not);
    Not(in=instruct12Not, out=writeM);


    // Set pc when (oC <, =, > 0) based on instructBuf[13..15]
    And(a=instructBuf13, b=ng, out=lpc1);
    And(a=instructBuf14, b=zr, out=lpc2);
    Or(a=ng, b=zr, out=ngORzr);
    Not(in=ngORzr, out=ngNotANDzrNot);
    And(a=instructBuf15, b=ngNotANDzrNot, out=lpc3);
    Or(a=lpc1, b=lpc2, out=lpc4);
    Or(a=lpc3, b=lpc4, out=lpc);
    PC(in=A, reset=reset, load=lpc, inc=true, out[0..14]=pc);
}