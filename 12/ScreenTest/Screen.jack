// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static bool color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i, x;

        let color = true;
        let twoToThe = Array.new(16);
        let i = 0;
        let x = 1;
        while (i < 16) {
            let twoToThe[i] = x;
            let x = x + x;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, bit;
        let addr = 16384 + (y * 32) + (x / 16);
        let bit = twoToThe[x - (x / 16 * 16)];
        if (color) {
            do Memory.poke(addr, Memory.peek(addr) | bit);
        } else {
            do Memory.poke(addr, Memory.peek(addr) & (~bit));
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x;
        let x = x1;
        while (x < (x2 + 1)){

            // Accelerate drawing by filling 16 pixels at a time
            if (x - (x / 16 * 16) = 0) {
                while ((x + 16) < x2) {
                    if (color) {
                        do Memory.poke(16384 + (y * 32) + (x / 16), -1);
                    } else {
                        do Memory.poke(16384 + (y * 32) + (x / 16), 0);
                    }
                    let x = x + 16;
                }
            }

            do Screen.drawPixel(x, y);
            let x = x + 1;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, temp;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx < 0) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
            let dx = -dx;
            let dy = -dy;
        }

        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        let a = 0;
        let b = 0;

        let diff = 0;
        if (dy > 0) {
            while ((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        } else {
            let dy = -dy;
            while ((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y;
        let y = y1;
        while (y < (y2 + 1)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        let dy = -r;
        while (dy < (r + 1)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
